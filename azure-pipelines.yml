trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Resource names/values you created
  RG: qa-playwright-rg
  ACR_NAME: shubhanshuazurefirst
  IMAGE_NAME: playwright-tests
  IMAGE_TAG: v1
  STG_ACCOUNT: <your-storage-account-name>   # e.g. pwreports123456
  STG_CONTAINER: test-reports
  SHARD_TOTAL: 4

stages:
# 1) Build & push the test image to ACR (uses ci/Dockerfile in your repo)
- stage: build_image
  displayName: Build test image
  jobs:
  - job: build
    displayName: Build & Push to ACR
    steps:
    - checkout: self
      fetchDepth: 1

    - task: AzureCLI@2
      displayName: ACR build
      inputs:
        azureSubscription: 'azure-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr build \
            --registry $(ACR_NAME) \
            --image $(IMAGE_NAME):$(IMAGE_TAG) \
            -f ci/Dockerfile .

# 2) Start ACI containers for shards, run tests, upload results to Blob
- stage: run_shards_aci
  displayName: Run shards on ACI
  dependsOn: build_image
  jobs:
  - job: shards
    displayName: Start ACI shards
    strategy:
      matrix:
        shard1: { SHARD_INDEX: 1 }
        shard2: { SHARD_INDEX: 2 }
        shard3: { SHARD_INDEX: 3 }
        shard4: { SHARD_INDEX: 4 }
    steps:
    - task: AzureCLI@2
      displayName: Create ACI and run shard $(SHARD_INDEX)
      inputs:
        azureSubscription: 'azure-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          NAME="pw-shard$(SHARD_INDEX)-$(Build.BuildId)"
          IMAGE="$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG)"

          echo "Creating ACI $NAME using image $IMAGE"
          az container create \
            --resource-group $(RG) \
            --name "$NAME" \
            --image "$IMAGE" \
            --registry-login-server $(ACR_NAME).azurecr.io \
            --registry-username "$(ACR_USERNAME)" \
            --registry-password "$(ACR_PASSWORD)" \
            --restart-policy Never \
            --cpu 2 --memory 4 \
            --environment-variables \
              SHARD_INDEX=$(SHARD_INDEX) \
              SHARD_TOTAL=$(SHARD_TOTAL) \
              BUILD_ID=$(Build.BuildId) \
              STG_ACCOUNT=$(STG_ACCOUNT) \
              STG_CONTAINER=$(STG_CONTAINER) \
              STORAGE_KEY=$(STORAGE_KEY) \
              PLAYWRIGHT_BROWSERS_PATH=/ms-playwright \
            --command-line "bash -lc '
              set -e
              echo Running shard ${SHARD_INDEX}/${SHARD_TOTAL}
              npm ci
              npx playwright test --shard=${SHARD_INDEX}/${SHARD_TOTAL} || true

              # Upload results (JUnit, HTML, blob-report) to Blob Storage
              DEST=https://${STG_ACCOUNT}.blob.core.windows.net/${STG_CONTAINER}/${BUILD_ID}/shard${SHARD_INDEX}
              echo Uploading to ${DEST}

              # azcopy is preinstalled in the image via ci/Dockerfile
              azcopy copy \"reports/junit/*\" \"${DEST}/reports/junit\" --recursive --from-to=LocalBlob --put-md5 --dest-key ${STORAGE_KEY} || true
              azcopy copy \"reports/html/*\"  \"${DEST}/reports/html\"  --recursive --from-to=LocalBlob --put-md5 --dest-key ${STORAGE_KEY} || true
              azcopy copy \"blob-report/*\"   \"${DEST}/blob-report\"   --recursive --from-to=LocalBlob --put-md5 --dest-key ${STORAGE_KEY} || true

              echo Done shard ${SHARD_INDEX}/${SHARD_TOTAL}
            '"

          echo "Waiting for completion..."
          az container wait --resource-group $(RG) --name "$NAME" --custom "instanceView.state=='Terminated'" || true
          echo "Logs for $NAME:"
          az container logs --resource-group $(RG) --name "$NAME" || true

# 3) Merge blob reports into one HTML and publish the consolidated artifact
- stage: merge_and_publish
  displayName: Merge & publish consolidated report
  dependsOn: run_shards_aci
  jobs:
  - job: merge
    displayName: Merge blob reports
    container: mcr.microsoft.com/playwright:v1.56.1-jammy
    steps:
    - checkout: self
      fetchDepth: 1

    - task: AzureCLI@2
      displayName: Download shard blobs
      inputs:
        azureSubscription: 'azure-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          DEST="$(Build.SourcesDirectory)/all-blobs"
          mkdir -p "$DEST"

          az storage blob download-batch \
            --account-name $(STG_ACCOUNT) \
            --account-key "$(STORAGE_KEY)" \
            --destination "$DEST" \
            --source "$(STG_CONTAINER)/$(Build.BuildId)" \
            --no-progress

          echo "Downloaded structure:"
          find "$DEST" -maxdepth 3 -type d -print || true

    - script: |
        set -e
        npm ci
        mkdir -p blob-report-merged
        # Gather all shard blob files into one folder (shards with no output are tolerated)
        cp -r all-blobs/**/blob-report/* blob-report-merged/ 2>/dev/null || true

        # Merge â†’ generates ./playwright-report
        npx playwright merge-reports --reporter html blob-report-merged

        echo "Merged report contents:"
        ls -la playwright-report || true
      displayName: Merge blob reports
      workingDirectory: $(Build.SourcesDirectory)

    - publish: $(Build.SourcesDirectory)/playwright-report
      artifact: PlaywrightHtmlReport
      condition: always()

# 4) Cleanup ACI containers
- stage: cleanup
  displayName: Cleanup ACI
  dependsOn: run_shards_aci
  condition: always()
  jobs:
  - job: delete_aci
    displayName: Delete ACI containers
    steps:
    - task: AzureCLI@2
      displayName: Delete shards
      inputs:
        azureSubscription: 'azure-spn'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          for i in $(seq 1 $(SHARD_TOTAL)); do
            NAME="pw-shard${i}-$(Build.BuildId)"
            echo "Deleting $NAME"
            az container delete --resource-group $(RG) --name "$NAME" --yes || true
          done
